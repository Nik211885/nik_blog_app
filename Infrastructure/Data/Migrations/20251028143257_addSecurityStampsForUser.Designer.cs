// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251028143257_addSecurityStampsForUser")]
    partial class addSecurityStampsForUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Entities.Arguments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Arguments");
                });

            modelBuilder.Entity("Application.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoutReactions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentParentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Application.Entities.LoginProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginProviders");
                });

            modelBuilder.Entity("Application.Entities.MailInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("MailInfos");
                });

            modelBuilder.Entity("Application.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("SendTimeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UrlNavigation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserReceivedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSendById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserReceivedId");

                    b.HasIndex("UserSendById");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Application.Entities.NotificationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("text");

                    b.Property<string>("ContentText")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MailInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("NotificationChanel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NotificationServicesType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("MailInfoId");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("Application.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CountComments")
                        .HasColumnType("bigint");

                    b.Property<string>("CoutReactions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("PostSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PostSlug")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Application.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayNavigation")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("SubjectParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SubjectParentId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Application.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CoutLoginFail")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserCvSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserCvSlug")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Application.ValueObject.PostSubject", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("PostId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PostSubjects");
                });

            modelBuilder.Entity("Application.ValueObject.ReactionEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.HasKey("UserId", "EntityType", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("ReactionEntities");
                });

            modelBuilder.Entity("Application.ValueObject.UserFollower", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RegisteredReceivedMessage")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("NotificationTemplatesArguments", b =>
                {
                    b.Property<Guid>("NotificationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArgumentsId")
                        .HasColumnType("uuid");

                    b.HasKey("NotificationTemplateId", "ArgumentsId");

                    b.HasIndex("ArgumentsId");

                    b.ToTable("NotificationTemplatesArguments");
                });

            modelBuilder.Entity("Application.Entities.Comment", b =>
                {
                    b.HasOne("Application.Entities.Comment", "CommentParent")
                        .WithMany("CommentChilds")
                        .HasForeignKey("CommentParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentParent");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Application.Entities.LoginProvider", b =>
                {
                    b.HasOne("Application.Entities.User", "User")
                        .WithMany("LoginProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Entities.Notification", b =>
                {
                    b.HasOne("Application.Entities.User", "UserReceived")
                        .WithMany()
                        .HasForeignKey("UserReceivedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "UserSendBy")
                        .WithMany()
                        .HasForeignKey("UserSendById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserReceived");

                    b.Navigation("UserSendBy");
                });

            modelBuilder.Entity("Application.Entities.NotificationTemplate", b =>
                {
                    b.HasOne("Application.Entities.MailInfo", "MailInfo")
                        .WithMany("NotificationTemplates")
                        .HasForeignKey("MailInfoId");

                    b.Navigation("MailInfo");
                });

            modelBuilder.Entity("Application.Entities.Post", b =>
                {
                    b.HasOne("Application.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Application.Entities.Subject", b =>
                {
                    b.HasOne("Application.Entities.User", "CreatedByUser")
                        .WithMany("Subjects")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.Subject", "SubjectParent")
                        .WithMany("ChildSubject")
                        .HasForeignKey("SubjectParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Application.ValueObject.LockEntity", "LockSubject", b1 =>
                        {
                            b1.Property<Guid>("SubjectId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsLock")
                                .HasColumnType("boolean");

                            b1.Property<DateTimeOffset?>("LockToTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("LockedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReasonLock")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("SubjectId");

                            b1.ToTable("Subjects");

                            b1.WithOwner()
                                .HasForeignKey("SubjectId");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("LockSubject");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubjectParent");
                });

            modelBuilder.Entity("Application.Entities.User", b =>
                {
                    b.HasOne("Application.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Application.ValueObject.LockEntity", "LockAccount", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsLock")
                                .HasColumnType("boolean");

                            b1.Property<DateTimeOffset?>("LockToTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("LockedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReasonLock")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Application.ValueObject.UserSubDomain", "UserSubDomain", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BioDomainBlog")
                                .HasColumnType("text");

                            b1.Property<long>("CoutFlowers")
                                .HasColumnType("bigint");

                            b1.Property<string>("SubDomainBlogSlug")
                                .HasMaxLength(150)
                                .IsUnicode(false)
                                .HasColumnType("character varying(150)");

                            b1.HasKey("UserId");

                            b1.HasIndex("SubDomainBlogSlug")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("Application.ValueObject.LockEntity", "LockSubDomain", b2 =>
                                {
                                    b2.Property<Guid>("UserSubDomainUserId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsLock")
                                        .HasColumnType("boolean");

                                    b2.Property<DateTimeOffset?>("LockToTime")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTimeOffset>("LockedAt")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("ReasonLock")
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.HasKey("UserSubDomainUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("UserSubDomainUserId");
                                });

                            b1.Navigation("LockSubDomain");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("LockAccount");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserSubDomain");
                });

            modelBuilder.Entity("Application.ValueObject.PostSubject", b =>
                {
                    b.HasOne("Application.Entities.Post", "Posts")
                        .WithMany("PostSubjects")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.Subject", "Subjects")
                        .WithMany("PostSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Application.ValueObject.ReactionEntity", b =>
                {
                    b.HasOne("Application.Entities.Comment", null)
                        .WithMany("ReactionComments")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.Post", null)
                        .WithMany("ReactionPosts")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.ValueObject.UserFollower", b =>
                {
                    b.HasOne("Application.Entities.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NotificationTemplatesArguments", b =>
                {
                    b.HasOne("Application.Entities.Arguments", null)
                        .WithMany()
                        .HasForeignKey("ArgumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Arguments_Arguments");

                    b.HasOne("Application.Entities.NotificationTemplate", null)
                        .WithMany()
                        .HasForeignKey("NotificationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationTemplates_NotificationTemplateId");
                });

            modelBuilder.Entity("Application.Entities.Comment", b =>
                {
                    b.Navigation("CommentChilds");

                    b.Navigation("ReactionComments");
                });

            modelBuilder.Entity("Application.Entities.MailInfo", b =>
                {
                    b.Navigation("NotificationTemplates");
                });

            modelBuilder.Entity("Application.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostSubjects");

                    b.Navigation("ReactionPosts");
                });

            modelBuilder.Entity("Application.Entities.Subject", b =>
                {
                    b.Navigation("ChildSubject");

                    b.Navigation("PostSubjects");
                });

            modelBuilder.Entity("Application.Entities.User", b =>
                {
                    b.Navigation("LoginProviders");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
